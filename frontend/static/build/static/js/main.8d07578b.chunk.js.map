{"version":3,"sources":["components/Alerts.js","components/App.js","serviceWorker.js","index.js"],"names":["Alert","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","visible","low_alert","high_alert","handleClick","bind","assertThisInitialized","setAlert","handleInput","event","setState","defineProperty","target","name","value","preventDefault","alertData","currency_id","props","currencyId","console","log","alert","react_default","a","createElement","Button","onClick","className","variant","onSubmit","Form","Group","Row","Col","Control","placeholder","onChange","type","Component","App","data","loaded","_this2","fetch","then","resp","json","coinMarket","e","method","headers","Content-Type","body","JSON","stringify","response","_this3","rows","map","market","symbol","quote","USD","price","circulating_supply","percent_change_1h","percent_change_24h","percent_change_7d","components_Alerts","id","Navbar","bg","Brand","href","Nav","Link","inline","FormControl","Table","size","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d07578b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../Alerts.css';\n\nimport { Form } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\n\nclass Alert extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            visible: false,\n            low_alert: '',\n            high_alert: '',\n\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.setAlert = this.setAlert.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleClick(event) {\n        let visible = this.state.visible;\n        this.setState({visible: !visible});\n        // event.target.nextElementSibling.toggleAttribute('hidden');\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]:event.target.value});\n        // if(event.target.name === \"low_alert\") {\n        //     this.setState({low_alert: event.target.value});\n        // }else if(event.target.name === \"high_alert\"){\n        //     this.setState({high_alert: event.target.value});\n        // }\n    }\n\n    setAlert(event) {\n        event.preventDefault();\n\n        let alertData = {\n            'low_alert': this.state.low_alert,\n            'high_alert': this.state.high_alert,\n            'currency_id': this.props.currencyId\n        };\n\n        console.log('i am firing', alert);\n        this.props.setAlert(alertData);\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Button onClick={this.handleClick} className={'alerts-button'} variant=\"outline-dark\">Alert</Button>\n                {this.state.visible ? (\n                    <form onSubmit={this.setAlert}>\n                        <Form.Group className='forms'>\n                          <Form.Row>\n                            <Col>\n                              <Form.Control\n                                  value={this.state.low_alert}\n                                  name=\"low_alert\"\n                                  placeholder=\"$ Low\"\n                                  onChange={this.handleInput}\n                              />\n                            </Col>\n                            <Col>\n                              <Form.Control\n                                  value={this.state.high_alert}\n                                  name=\"high_alert\"\n                                  placeholder=\"$ High\"\n                                  onChange={this.handleInput}\n                              />\n                            </Col>\n                          </Form.Row>\n                          <Button variant=\"primary\" type=\"submit\">\n                            Set\n                          </Button>\n                          <Button variant=\"primary\" type=\"button\">\n                            Cancel\n                          </Button>\n                        </Form.Group>\n                    </form>\n                ) : null}\n\n            </div>\n        );\n    }\n\n}\n\nexport default Alert","import React, {Component} from 'react';\n\nimport Alert from './Alerts'\n\nimport {Table, Nav, Navbar, Form, FormControl, Button} from \"react-bootstrap\";\n\n\n\nimport '../App.css';\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            loaded: false,\n            placeholder: \"Loading...\"\n        }\n\n        this.setAlert = this.setAlert.bind(this);\n    }\n\n    componentDidMount() {\n        try {\n            fetch('/api/latest/').then((resp) => {\n                return resp.json();\n            }).then((coinMarket) => {\n                console.log(coinMarket);\n\n                this.setState({\n                    data: coinMarket.data\n                });\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    setAlert(alertData) {\n        console.log('alert data', alertData);\n\n        let headers = {\n            \"Content-Type\": \"application/json\"\n        };\n\n        fetch('/api/alerts/', {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(alertData),\n        }).then((response) => {\n            return response.json()\n        }).then((json) => {\n            console.log(json);\n        })\n\n    }\n\n\n    render() {\n        let rows = this.state.data.map((market) => {\n\n            return (\n                <tr>\n                    <td>{market.symbol}</td>\n                    <td>{market.name}</td>\n                    <td>{market.quote.USD.price}</td>\n                    <td>{market.circulating_supply}</td>\n                    <td>{market.quote.USD.percent_change_1h}</td>\n                    <td>{market.quote.USD.percent_change_24h}</td>\n                    <td>{market.quote.USD.percent_change_7d}</td>\n                    <td><Alert currencyId={market.id} setAlert={this.setAlert}/></td>\n                </tr>\n\n            )\n        });\n\n        return (\n            <div className=\"App\">\n                {/*<h1 className={'heading'}>Coin Tracker</h1>*/}\n\n                    <Navbar bg=\"light\" variant=\"light\">\n                        <Navbar.Brand href=\"#home\">Coin Tracker</Navbar.Brand>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\n                            <Nav.Link href=\"#features\">Alerts</Nav.Link>\n                            <Nav.Link href=\"#pricing\">Log Out</Nav.Link>\n                        </Nav>\n                        <Form inline>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n                            <Button variant=\"outline-primary\">Search</Button>\n                        </Form>\n                    </Navbar>\n\n\n\n\n                <div className={\"crypto-data col-md-8\"}>\n\n                    <Table size=\"sm\" className=\"table-striped\">\n                        <thead>\n                        <tr>\n                            <th>Symbol</th>\n                            <th>Name</th>\n                            <th>Price</th>\n                            <th>Circulating Supply</th>\n                            <th>% Change 1h</th>\n                            <th>% Change 24h</th>\n                            <th>% Change 7d</th>\n                            <th></th>\n                        </tr>\n                        </thead>\n\n                        <tbody className={'rows'}>\n                        {rows}\n                        </tbody>\n                    </Table>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}